[gd_scene load_steps=8 format=3 uid="uid://du5v1xpm5fjcm"]

[ext_resource type="Script" path="res://Misc/SpriteObject/Script/sprite_object.gd" id="1_i7wd5"]
[ext_resource type="Texture2D" uid="uid://cppqjhaoi70l5" path="res://Misc/EasyBlend/Blends/add.png" id="2_wfm0d"]
[ext_resource type="Texture2D" uid="uid://bt5ep2bnr2x76" path="res://Misc/SpriteObject/origin.png" id="3_xhumr"]
[ext_resource type="Texture2D" uid="uid://bgyf0p8jif68s" path="res://icon.svg" id="4_6ey4y"]

[sub_resource type="Shader" id="Shader_l06p8"]
resource_local_to_scene = true
code = "shader_type canvas_item;
uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;
uniform bool enabled;



uniform sampler2D Blend;  //Blending mode texture
uniform float Intensity : hint_range(0, 1) = 1.0;  //Default should be 1 but syntax doesn't allow it currently?

uniform bool wiggle;
uniform float rotation = 0.0;
uniform vec2 rotation_offset = vec2(0.5, 0.5);

varying vec4 modulate;
varying vec2 rot_uv;

void vertex(){
	modulate = COLOR;
	
}

void fragment() {
	if (wiggle){
		float rotation_anchored = rotation * (1.0 - UV.y);
		mat2 rotation_mat = mat2(vec2(cos(rotation_anchored), sin(rotation_anchored)),
		vec2(-sin(rotation_anchored), cos(rotation_anchored)));
		vec2 centered_uv = UV - rotation_offset;
		vec2 rotated_uv = centered_uv * rotation_mat;
		rotated_uv = rotated_uv + rotation_offset;
		
		COLOR = texture(TEXTURE, rotated_uv)*modulate;
		rot_uv = rotated_uv;
	}
	
	if (enabled){
		vec4 bgColor;
		vec4 Color = texture(TEXTURE, UV);
		vec4 blendColor;
	   	vec4 output = vec4(1,1,1,1);
	
		bgColor = texture( TEXTURE, UV);
	
		output.a = Color.a;
	
		blendColor = texture( Blend, vec2(bgColor.r, Color.r) );
		output.r = blendColor.r;
		blendColor = texture( Blend, vec2(bgColor.g, Color.g) );
		output.g = blendColor.g;
		blendColor = texture( Blend, vec2(bgColor.b, Color.b) );
		output.b = blendColor.b;
	
		output = mix(Color, output, Intensity)* modulate;
		
		// needs fix, uauauau
		if(wiggle){
			COLOR = output *texture(TEXTURE, rot_uv);

		}
		else{
			COLOR = output;
		}
		
	}
	
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_1tqhp"]
resource_local_to_scene = true
shader = SubResource("Shader_l06p8")
shader_parameter/enabled = false
shader_parameter/Intensity = 1.0
shader_parameter/wiggle = false
shader_parameter/rotation = 0.0
shader_parameter/rotation_offset = Vector2(0.5, 0.5)
shader_parameter/Blend = ExtResource("2_wfm0d")

[sub_resource type="CanvasTexture" id="CanvasTexture_aq8i0"]
diffuse_texture = ExtResource("4_6ey4y")

[node name="SpriteObject" type="Node2D" groups=["Sprites"]]
script = ExtResource("1_i7wd5")

[node name="Wobble" type="Node2D" parent="."]

[node name="Squish" type="Node2D" parent="Wobble"]

[node name="Drag" type="Node2D" parent="Wobble/Squish"]

[node name="Sprite2D" type="Sprite2D" parent="Wobble/Squish/Drag"]
process_priority = 5
material = SubResource("ShaderMaterial_1tqhp")
texture = SubResource("CanvasTexture_aq8i0")

[node name="Origin" type="Sprite2D" parent="Wobble/Squish/Drag/Sprite2D"]
visible = false
z_index = 4096
texture = ExtResource("3_xhumr")

[node name="Grab" type="TextureButton" parent="Wobble/Squish/Drag/Sprite2D"]
unique_name_in_owner = true
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -64.0
offset_top = -64.0
offset_right = -64.0
offset_bottom = -64.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 3
mouse_filter = 1
stretch_mode = 0

[node name="Blink" type="Timer" parent="."]
wait_time = 0.2

[node name="Animation" type="Timer" parent="."]

[connection signal="button_down" from="Wobble/Squish/Drag/Sprite2D/Grab" to="." method="_on_grab_button_down"]
[connection signal="button_up" from="Wobble/Squish/Drag/Sprite2D/Grab" to="." method="_on_grab_button_up"]
